# -*- coding: utf-8 -*-
"""Usedcar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g7W3d4RU-Iogcg3bJUwDAK2BvtuaZO24

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as mp
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

dataset = pd.read_csv('/content/car data.csv')
dataset

dataset.pop('Car_Name')
dataset.pop('Selling_type')

dataset

dataset.isna().sum()

"""Fuel = dataset.pop('Fuel_Type')
dataset['Petrol'] = (Petrol == 1) * 1.0
dataset['Diesel'] = (Disel == 2) * 1.0
dataset.tail()
"""

fuel = dataset.pop('Fuel_Type')
dataset['Petrol'] = (fuel == "Petrol") * 1.0
dataset['Diesel'] = (fuel == "Diesel")  * 1.0
dataset['CNG'] = (fuel == "Diesel")  * 1.0


dataset.tail()

trans = dataset.pop('Transmission')
dataset['Manual'] = (trans == "Manual") * 1.0
dataset['Automatic'] = (trans == "Automatic")  * 1.0
dataset.tail()

y = dataset.pop('Selling_Price')
X=dataset

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Using RandomForestRegressor**"""

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

model.predict([[2016,11.6,33988,0,0.0,1.0,1.0,1.0,0.0]])

y_pred

y_test

"""**GRAPH**"""

ind=np.arange(1,41)
actual = y_test[:40].copy()
pred= y_pred[:40].copy()
mp.plot(ind,pred, color='Green', label='Predicted Value')
mp.plot(ind, actual, color='red', label='Actual Value')
mp.title("Line Plot ")
mp.legend()

ind=np.arange(1,11)
actual = y_test[:10].copy()
pred= y_pred[:10].copy()
mp.scatter(ind, pred, color='Green', label='Predicted Value')
mp.scatter(ind, actual, color='red', label='Actual Value')
mp.title("scatter Plot ")
mp.legend()

ind=np.arange(1,21)
actual = y_test[:20].copy()
pred= y_pred[:20].copy()
mp.bar(ind, pred, color='Green', label='Predicted Value')
mp.bar(ind, actual, color='red', label='Actual Value')
mp.title("Bar Plot ")
mp.legend()

mse = mean_squared_error(y_test, y_pred)
mse

from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, y_pred)
mae

"""**Using LinearRegression**

****
"""

model2 = LinearRegression()

model2.fit(X_train, y_train)

y_pred2 = model2.predict(X_test)

y_pred2

y_test

mse = mean_squared_error(y_test, y_pred2)
mse

from sklearn.metrics import mean_absolute_error
mae = mean_absolute_error(y_test, y_pred2)
mae

ind=np.arange(1,41)
actual = y_test[:40].copy()
pred= y_pred2[:40].copy()
mp.plot(ind, pred, color='blue', label='Predicted')
mp.plot(ind, actual, color='red', label='Actual')
mp.legend()

ind=np.arange(1,11)
actual = y_test[:10].copy()
pred= y_pred2[:10].copy()
mp.bar(ind, pred, color='blue', label='Predicted')
mp.bar(ind, actual, color='red', label='Actual')
mp.legend()